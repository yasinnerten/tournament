#!/usr/bin/bash

# Load environment variables from ./.env file
if [ -f ./.env ]; then
  export $(cat ./.env | grep -v '#' | awk '/=/ {print $1}')
else
  echo "./.env file not found!"
  exit 1
fi

# Ensure .pgpass file exists and has correct permissions
PGPASSFILE=./.pgpass
if [ ! -f $PGPASSFILE ]; then
  echo "$PGPASSFILE file not found!"
  exit 1
fi

# Function to check if a PostgreSQL database exists
function check_postgres_db_exists() {
  echo "Checking if PostgreSQL database $DB_NAME exists..."
  psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -W $DB_PASSWORD -c '\q' 2>/dev/null
}

# Create PostgreSQL database if it does not exist
if check_postgres_db_exists; then
  echo "PostgreSQL database $DB_NAME already exists."
else
  echo "Creating PostgreSQL database $DB_NAME..."
  PGPASSFILE=./.pgpass createdb -U $DB_USER -h $DB_HOST -p $DB_PORT $DB_NAME
  echo "Database $DB_NAME created."
fi

function check_redis_running() {
  echo "Check if Redis server is running"
  if redis-cli -h $REDIS_HOST -p $REDIS_PORT ping | grep -q "PONG"; then
  else
    echo "Failed to start Redis server."
  fi
}

# Check if Redis is running
if check_redis_running; then
  echo "Redis server started."
else
  echo "Failed to start Redis server."
  exit 1
fi

echo "Environment setup completed."

# To create manually new PostgreSQL user and database, run the following commands:

# CREATE USER localhost PASSWORD 'postgres' ;
# CREATE DATABASE users_db TEMPLATE template1 OWNER localhost ;
# ALTER DEFAULT PRIVILEGES FOR ROLE localhost IN SCHEMA public GRANT ALL ON TABLES TO localhost ;

# \c: change database, \l: list databases, \du: list (users), \dt: list tables

# redis-cli -h localhost -p 6379 ping | grep -q "PONG" && echo "Redis server started." || echo "Failed to start Redis server."